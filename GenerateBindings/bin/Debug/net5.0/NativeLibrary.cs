// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NativeLibrary
{
    public unsafe partial class ExampleClass : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 4)]
        public partial struct __Internal
        {
            internal int _count;

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "??0ExampleClass@@QEAA@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop.dll", EntryPoint = "??0ExampleClass@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?Increment@ExampleClass@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Increment(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?Decrement@ExampleClass@@QEAAXXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Decrement(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?GetCount@ExampleClass@@QEBAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCount(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.ExampleClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.ExampleClass>();

        protected bool __ownsNativeInstance;

        internal static ExampleClass __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ExampleClass(native.ToPointer(), skipVTables);
        }

        internal static ExampleClass __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ExampleClass)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ExampleClass __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ExampleClass(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ExampleClass(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ExampleClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public ExampleClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.ExampleClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public ExampleClass(global::NativeLibrary.ExampleClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.ExampleClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NativeLibrary.ExampleClass.__Internal*) __Instance) = *((global::NativeLibrary.ExampleClass.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Increment()
        {
            __Internal.Increment(__Instance);
        }

        public void Decrement()
        {
            __Internal.Decrement(__Instance);
        }

        public int Count
        {
            get
            {
                var __ret = __Internal.GetCount(__Instance);
                return __ret;
            }
        }
    }

    public unsafe partial class NewMaster : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop.dll", EntryPoint = "??0NewMaster@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?GetTest@NewMaster@@QEBAHXZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTest(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?GetRawExampleClass@NewMaster@@QEBAPEAVExampleClass@@XZ", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetRawExampleClass(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.NewMaster> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.NewMaster>();

        protected bool __ownsNativeInstance;

        internal static NewMaster __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new NewMaster(native.ToPointer(), skipVTables);
        }

        internal static NewMaster __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (NewMaster)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static NewMaster __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new NewMaster(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NewMaster(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NewMaster(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public NewMaster()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.NewMaster.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public NewMaster(global::NativeLibrary.NewMaster _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.NewMaster.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NativeLibrary.NewMaster.__Internal*) __Instance) = *((global::NativeLibrary.NewMaster.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Test
        {
            get
            {
                var __ret = __Internal.GetTest(__Instance);
                return __ret;
            }
        }

        public global::NativeLibrary.ExampleClass RawExampleClass
        {
            get
            {
                var __ret = __Internal.GetRawExampleClass(__Instance);
                var __result0 = global::NativeLibrary.ExampleClass.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }
    }

    public unsafe partial class Foo : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal int a;
            internal float b;

            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop.dll", EntryPoint = "??0Foo@@QEAA@AEBV0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.Foo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NativeLibrary.Foo>();

        protected bool __ownsNativeInstance;

        internal static Foo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new Foo(native.ToPointer(), skipVTables);
        }

        internal static Foo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (Foo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static Foo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new Foo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Foo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Foo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public Foo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public Foo(global::NativeLibrary.Foo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NativeLibrary.Foo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NativeLibrary.Foo.__Internal*) __Instance) = *((global::NativeLibrary.Foo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int A
        {
            get
            {
                return ((__Internal*)__Instance)->a;
            }

            set
            {
                ((__Internal*)__Instance)->a = value;
            }
        }

        public float B
        {
            get
            {
                return ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = value;
            }
        }
    }

    public unsafe partial class Sample
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("ExistingInterop", EntryPoint = "?FooAdd@@YAHPEAVFoo@@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FooAdd(__IntPtr foo);
        }

        public static int FooAdd(global::NativeLibrary.Foo foo)
        {
            var __arg0 = foo is null ? __IntPtr.Zero : foo.__Instance;
            var __ret = __Internal.FooAdd(__arg0);
            return __ret;
        }
    }
}
